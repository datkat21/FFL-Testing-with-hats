#include <ShaderSwitch.h>

#include <gpu/rio_RenderState.h>
#include <math/rio_Matrix.h>
#include <misc/rio_MemUtil.h>

// for isCommonColorMarked
#include <nn/ffl/FFLiColor.h>

#if RIO_IS_CAFE
#include <gx2/registers.h>
#include <gx2/utils.h>
#endif // RIO_IS_CAFE

namespace {

#if RIO_IS_CAFE

#define GX2_ATTRIB_FORMAT_SNORM_10_10_10_2 (GX2AttribFormat(GX2_ATTRIB_FLAG_SIGNED | GX2_ATTRIB_TYPE_10_10_10_2))
#define GX2_SHADER_ALIGNMENT GX2_SHADER_PROGRAM_ALIGNMENT

#define GX2_COMP_SEL_X001 GX2_SEL_MASK(GX2_SQ_SEL_X, GX2_SQ_SEL_0, GX2_SQ_SEL_0, GX2_SQ_SEL_1)
#define GX2_COMP_SEL_XY01 GX2_SEL_MASK(GX2_SQ_SEL_X, GX2_SQ_SEL_Y, GX2_SQ_SEL_0, GX2_SQ_SEL_1)
#define GX2_COMP_SEL_XYZ1 GX2_SEL_MASK(GX2_SQ_SEL_X, GX2_SQ_SEL_Y, GX2_SQ_SEL_Z, GX2_SQ_SEL_1)
#define GX2_COMP_SEL_XYZW GX2_SEL_MASK(GX2_SQ_SEL_X, GX2_SQ_SEL_Y, GX2_SQ_SEL_Z, GX2_SQ_SEL_W)

inline void GX2InitAttribStream(
    GX2AttribStream* p_attribute,
    u32 location,
    u32 buffer,
    u32 offset,
    GX2AttribFormat format
)
{
    static constexpr u32 sFormatMask[] = {
        GX2_COMP_SEL_X001, GX2_COMP_SEL_XY01,
        GX2_COMP_SEL_X001, GX2_COMP_SEL_X001,
        GX2_COMP_SEL_XY01, GX2_COMP_SEL_X001,
        GX2_COMP_SEL_X001, GX2_COMP_SEL_XY01,
        GX2_COMP_SEL_XY01, GX2_COMP_SEL_XYZ1,
        GX2_COMP_SEL_XYZW, GX2_COMP_SEL_XYZW,
        GX2_COMP_SEL_XY01, GX2_COMP_SEL_XY01,
        GX2_COMP_SEL_XYZW, GX2_COMP_SEL_XYZW,
        GX2_COMP_SEL_XYZ1, GX2_COMP_SEL_XYZ1,
        GX2_COMP_SEL_XYZW, GX2_COMP_SEL_XYZW
    };

    p_attribute->buffer     = buffer;
    p_attribute->offset     = offset;
    p_attribute->location   = location;
    p_attribute->format     = format;
    p_attribute->mask       = sFormatMask[format & 0xff];
    p_attribute->type       = GX2_ATTRIB_INDEX_PER_VERTEX;
    p_attribute->aluDivisor = 0;
    p_attribute->endianSwap = GX2_ENDIAN_SWAP_DEFAULT;
}

#endif // RIO_IS_CAFE


const rio::BaseVec4f& getColorUniform(const FFLColor& color)
{
    return reinterpret_cast<const rio::BaseVec4f&>(color.r);
}

// NOTE: there isn't a concrete way to determine the gamma type
// I don't know how it's being set OR if the decomp provides a way to set it
//static bool sGammaType = FFLiUseOffScreenSrgbFetch() ? 0 : 1;//1 : 0;
const bool sGammaType = 1;

// MATERIALS SECTION!!!!!
// nn::mii::Material contains DrawParamMaterial

struct Color3 {
    float r;
    float g;
    float b;
};

struct SpecularMaterial {
    Color3 color;
    float factorA;
    float factorB;
    float shinness;
};

struct RimLightMaterial {
    Color3 color;
    float power;
    float width;
};

struct DrawParamMaterial {
    float halfLambertFactor;
    float sssSpecularBlendFactor;
    Color3 sssColor;
    SpecularMaterial specular;
    RimLightMaterial rimLight;
};

// material tables go in this order
enum MaterialType {
    MaterialType_Mask = 0,
    MaterialType_Glass,
    MaterialType_Pants,
    MaterialType_Faceline,
    MaterialType_Nose,
    MaterialType_Body,
    MaterialType_Hat,
    MaterialType_Hair,
    MaterialType_Beard,
    MaterialType_Max
};

const DrawParamMaterial cMaskMaterial =
    { 0.0f, 1.0f, { 0.0f, 0.0f, 0.0f }, { { 0.0f, 0.0f, 0.0f }, 0.0f, 0.0f, 0.1f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } } // line 4
;

const DrawParamMaterial cGlassMaterial =
    { 0.35f, 1.0f, { 0.0f, 0.0f, 0.0f }, { { 0.09804292f, 0.09804292f, 0.09804292f }, 0.3f, 0.0f, 30.0f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.0f } } // line 8
;


const DrawParamMaterial cPantsMaterials[2] = {
    { 0.6f, 1.0f, { 0.0f, 0.0f, 0.0f }, { { 0.01960913f, 0.01960913f, 0.01960913f }, 1.0f, 0.02f, 0.7f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } }, // line 12
    { 0.6f, 1.0f, { 0.0f, 0.0f, 0.1568674f }, { { 0.2352996f, 0.1568674f, 0.0f }, 1.0f, 0.02f, 0.7f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } } // special pants color
};

const DrawParamMaterial cFacelineMaterials[10] = {
    { 0.4f, 1.0f, { 0.6470634f, 0.1333377f, 0.0f }, { { 0.1764755f, 0.08235628f, 0.05882626f }, 2.6f, 0.02f, 0.8f }, { { 0.2627507f, 0.1176511f, 0.08627796f }, 2.0f, 0.3f } }, // line 17
    { 0.4f, 1.0f, { 0.6431419f, 0.03529608f, 0.0f }, { { 0.1372593f, 0.09412124f, 0.03921773f }, 2.6f, 0.02f, 0.8f }, { { 0.2352996f, 0.1568674f, 0.06666958f }, 2.0f, 0.3f } },
    { 0.4f, 1.0f, { 0.2941234f, 0.0f, 0.0f }, { { 0.1215728f, 0.03921773f, 0.01176563f }, 2.6f, 0.02f, 0.8f }, { { 0.2431428f, 0.07843459f, 0.0235309f }, 2.0f, 0.3f } },
    { 0.4f, 1.0f, { 0.6980433f, 0.03921773f, 0.0f }, { { 0.1137294f, 0.05490454f, 0.01960913f }, 2.6f, 0.02f, 0.8f }, { { 0.2352996f, 0.1176511f, 0.03921773f }, 2.0f, 0.3f } },
    { 0.4f, 1.0f, { 0.2000051f, 0.01176563f, 0.0f }, { { 0.1254943f, 0.02745257f, 0.01176563f }, 2.6f, 0.02f, 0.8f }, { { 0.250986f, 0.05490454f, 0.0235309f }, 2.0f, 0.3f } },
    { 0.4f, 1.0f, { 0.05882626f, 0.00392195f, 0.0f }, { { 0.03137433f, 0.00784381f, 0.00392195f }, 2.6f, 0.02f, 0.8f }, { { 0.250986f, 0.06274787f, 0.03137433f }, 2.0f, 0.3f } },
    { 0.4f, 1.0f, { 0.6549063f, 0.1568674f, 0.0f }, { { 0.1764755f, 0.08235628f, 0.05882626f }, 2.6f, 0.02f, 0.8f }, { { 0.2627507f, 0.1215728f, 0.08627796f }, 2.0f, 0.3f } },
    { 0.4f, 1.0f, { 0.5882402f, 0.1098079f, 0.03529608f }, { { 0.1372593f, 0.07843459f, 0.03921773f }, 2.6f, 0.02f, 0.8f }, { { 0.2352996f, 0.1451026f, 0.08235628f }, 2.0f, 0.3f } },
    { 0.4f, 1.0f, { 0.07843459f, 0.00392195f, 0.00392195f }, { { 0.05882626f, 0.01960913f, 0.00392195f }, 2.6f, 0.02f, 0.8f }, { { 0.2352996f, 0.04706119f, 0.01176563f }, 2.0f, 0.3f } },
    { 0.4f, 1.0f, { 0.01960913f, 0.0f, 0.0f }, { { 0.01960913f, 0.00784381f, 0.00392195f }, 2.6f, 0.02f, 0.8f }, { { 0.2352996f, 0.07843459f, 0.03921773f }, 2.0f, 0.3f } } // line 26
};

const DrawParamMaterial cNoseMaterials[10] = {
    { 0.3f, 0.0f, { 0.6470634f, 0.1333377f, 0.0f }, { { 0.1764755f, 0.08235628f, 0.05882626f }, 2.6f, 0.02f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 0.55f, 0.0f } },
    { 0.3f, 0.0f, { 0.6431419f, 0.03529608f, 0.0f }, { { 0.1372593f, 0.09412124f, 0.03921773f }, 2.6f, 0.02f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 0.55f, 0.0f } },
    { 0.3f, 0.0f, { 0.2941234f, 0.0f, 0.0f }, { { 0.1215728f, 0.03921773f, 0.01176563f }, 2.6f, 0.02f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 0.55f, 0.0f } },
    { 0.3f, 0.0f, { 0.6980433f, 0.03921773f, 0.0f }, { { 0.1137294f, 0.05490454f, 0.01960913f }, 2.6f, 0.02f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 0.55f, 0.0f } },
    { 0.3f, 0.0f, { 0.2000051f, 0.01176563f, 0.0f }, { { 0.1254943f, 0.02745257f, 0.01176563f }, 2.6f, 0.02f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 0.55f, 0.0f } },
    { 0.3f, 0.0f, { 0.05882626f, 0.00392195f, 0.0f }, { { 0.03137433f, 0.00784381f, 0.00392195f }, 2.6f, 0.02f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 0.55f, 0.0f } },
    { 0.3f, 0.0f, { 0.6549063f, 0.1568674f, 0.0f }, { { 0.1764755f, 0.08235628f, 0.05882626f }, 2.6f, 0.02f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 0.55f, 0.0f } },
    { 0.3f, 0.0f, { 0.5882402f, 0.1098079f, 0.03529608f }, { { 0.1372593f, 0.07843459f, 0.03921773f }, 2.6f, 0.02f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 0.55f, 0.0f } },
    { 0.3f, 0.0f, { 0.07843459f, 0.00392195f, 0.00392195f }, { { 0.05882626f, 0.01960913f, 0.00392195f }, 2.6f, 0.02f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 0.55f, 0.0f } },
    { 0.3f, 0.0f, { 0.01960913f, 0.0f, 0.0f }, { { 0.01960913f, 0.00784381f, 0.00392195f }, 2.6f, 0.02f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 0.55f, 0.0f } } // line 39
};

const DrawParamMaterial cBodyMaterials[12] = {
    { 0.5f, 0.0f, { 0.1647106f, 0.01176563f, 0.00392195f }, { { 0.1647106f, 0.0235309f, 0.01568734f }, 1.0f, 0.0f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } }, // line 43
    { 0.5f, 0.0f, { 0.2745156f, 0.0f, 0.0f }, { { 0.2000051f, 0.08627796f, 0.01960913f }, 1.0f, 0.0f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.0f } },
    { 0.5f, 0.0f, { 0.2000051f, 0.08235628f, 0.00392195f }, { { 0.2000051f, 0.1686323f, 0.0235309f }, 1.0f, 0.0f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.0f } },
    { 0.5f, 0.0f, { 0.0235309f, 0.08235628f, 0.0235309f }, { { 0.09412124f, 0.1647106f, 0.0235309f }, 1.0f, 0.0f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.0f } },
    { 0.5f, 0.0f, { 0.0f, 0.04706119f, 0.03529608f }, { { 0.0f, 0.09412124f, 0.03529608f }, 1.0f, 0.0f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.0f } },
    { 0.5f, 0.0f, { 0.0f, 0.02745257f, 0.1411809f }, { { 0.00784381f, 0.05490454f, 0.1411809f }, 1.0f, 0.0f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.0f } },
    { 0.5f, 0.0f, { 0.01176563f, 0.06666958f, 0.1725539f }, { { 0.04706119f, 0.1725539f, 0.2156916f }, 1.0f, 0.0f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.0f } },
    { 0.5f, 0.0f, { 0.04706119f, 0.03529608f, 0.09804292f }, { { 0.1921619f, 0.07059128f, 0.09804292f }, 1.0f, 0.0f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.0f } },
    { 0.5f, 0.0f, { 0.01960913f, 0.01568734f, 0.1333377f }, { { 0.09019956f, 0.03137433f, 0.1333377f }, 1.0f, 0.0f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.0f } },
    { 0.5f, 0.0f, { 0.0f, 0.0f, 0.01568734f }, { { 0.03137433f, 0.01176563f, 0.00392195f }, 1.0f, 0.0f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.0f } }, // line 52
    { 0.5f, 0.0f, { 0.04313947f, 0.08627796f, 0.1725539f }, { { 0.2196132f, 0.1725539f, 0.1725539f }, 1.0f, 0.0f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.0f } },
    { 0.5f, 0.0f, { 0.0f, 0.0f, 0.0f }, { { 0.01960913f, 0.01960913f, 0.01960913f }, 1.0f, 0.0f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.0f } } // line 14
};

const DrawParamMaterial cHatMaterials[12] = {
    { 0.6f, 1.0f, { 0.3333392f, 0.0f, 0.00392195f }, { { 0.2470644f, 0.0f, 0.00784381f }, 2.0f, 0.0f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } }, // line 56
    { 0.6f, 1.0f, { 0.5098094f, 0.2745156f, 0.03921773f }, { { 0.2156916f, 0.1451026f, 0.02745257f }, 2.0f, 0.02f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.6f, 1.0f, { 0.3921627f, 0.1372593f, 0.03921773f }, { { 0.2352996f, 0.1176511f, 0.03921773f }, 1.1f, 0.02f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.6f, 1.0f, { 0.1176511f, 0.3137313f, 0.03921773f }, { { 0.1098079f, 0.2470644f, 0.01960913f }, 2.0f, 0.02f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.6f, 1.0f, { 0.03921773f, 0.1176511f, 0.05098281f }, { { 0.01960913f, 0.1176511f, 0.01960913f }, 2.0f, 0.02f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.6f, 1.0f, { 0.01960913f, 0.05882626f, 0.1960836f }, { { 0.00392195f, 0.02745257f, 0.2627507f }, 2.0f, 0.02f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.6f, 1.0f, { 0.07843459f, 0.2235348f, 0.345104f }, { { 0.06274787f, 0.1647106f, 0.2392212f }, 2.0f, 0.8f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.6f, 1.0f, { 0.3137313f, 0.05882626f, 0.07843459f }, { { 0.2745156f, 0.05882626f, 0.07843459f }, 2.0f, 0.02f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.6f, 1.0f, { 0.1176511f, 0.02745257f, 0.3411824f }, { { 0.08627796f, 0.01176563f, 0.1725539f }, 2.0f, 0.02f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.6f, 1.0f, { 0.03921773f, 0.01960913f, 0.00784381f }, { { 0.03921773f, 0.01960913f, 0.00784381f }, 2.0f, 0.02f, 2.0f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } }, // line 65
    { 0.6f, 1.0f, { 0.4862802f, 0.4862802f, 0.3921627f }, { { 0.1568674f, 0.1568674f, 0.1176511f }, 2.0f, 0.02f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } }, // line 28
    { 0.6f, 1.0f, { 0.0f, 0.0f, 0.0f }, { { 0.00784381f, 0.00784381f, 0.00784381f }, 2.0f, 0.02f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } } // line 29
};

const DrawParamMaterial cHairMaterials[100] = {
    { 0.45f, 1.0f, { 0.00784381f, 0.00392195f, 0.00392195f }, { { 0.01960913f, 0.01568734f, 0.01568734f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } }, // line 69
    { 0.45f, 1.0f, { 0.01176563f, 0.00392195f, 0.0f }, { { 0.1254943f, 0.04706119f, 0.00784381f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.01568734f, 0.00392195f, 0.0f }, { { 0.1803971f, 0.03529608f, 0.00392195f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.0235309f, 0.00784381f, 0.00392195f }, { { 0.2431428f, 0.09019956f, 0.01176563f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.0235309f, 0.0235309f, 0.02745257f }, { { 0.1411809f, 0.1411809f, 0.1490242f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.01176563f, 0.01176563f, 0.0f }, { { 0.1529458f, 0.09412124f, 0.00784381f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.0235309f, 0.01568734f, 0.00392195f }, { { 0.2666723f, 0.1372593f, 0.01176563f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.03921773f, 0.03137433f, 0.01176563f }, { { 0.407849f, 0.250986f, 0.04313947f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.0f, 0.0f, 0.0f }, { { 0.01176563f, 0.01176563f, 0.01176563f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.01960913f, 0.01960913f, 0.01960913f }, { { 0.1254943f, 0.1333377f, 0.1333377f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.01960913f, 0.01176563f, 0.00784381f }, { { 0.2000051f, 0.09412124f, 0.0235309f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.01568734f, 0.01568734f, 0.00784381f }, { { 0.1882403f, 0.1451026f, 0.02745257f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.01176563f, 0.01568734f, 0.03137433f }, { { 0.08235628f, 0.129416f, 0.3294176f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.00784381f, 0.01960913f, 0.01568734f }, { { 0.06274787f, 0.1725539f, 0.1725539f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.01568734f, 0.00784381f, 0.0f }, { { 0.1882403f, 0.08627796f, 0.00784381f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.03137433f, 0.0f, 0.0f }, { { 0.3294176f, 0.0235309f, 0.00392195f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.00392195f, 0.00784381f, 0.01960913f }, { { 0.03529608f, 0.07451299f, 0.2039268f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.03137433f, 0.01568734f, 0.0f }, { { 0.3294176f, 0.1490242f, 0.0f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.0235309f, 0.01960913f, 0.01960913f }, { { 0.1411809f, 0.1333377f, 0.1215728f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.03921773f, 0.01568734f, 0.0f }, { { 0.4235353f, 0.1254943f, 0.00392195f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.0f, 0.0f, 0.0f }, { { 0.01960913f, 0.01960913f, 0.01960913f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.04706119f, 0.01176563f, 0.01176563f }, { { 0.4784371f, 0.1098079f, 0.03921773f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.04706119f, 0.02745257f, 0.01960913f }, { { 0.4705939f, 0.2392212f, 0.06666958f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.02745257f, 0.01568734f, 0.01176563f }, { { 0.2745156f, 0.1254943f, 0.03529608f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.0235309f, 0.00392195f, 0.00392195f }, { { 0.2588292f, 0.05882626f, 0.01960913f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.04706119f, 0.01960913f, 0.01960913f }, { { 0.4980448f, 0.1803971f, 0.05882626f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.04706119f, 0.03137433f, 0.03137433f }, { { 0.4980448f, 0.2392212f, 0.09412124f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.04706119f, 0.03529608f, 0.03529608f }, { { 0.4980448f, 0.298045f, 0.1058862f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.01960913f, 0.00784381f, 0.00784381f }, { { 0.2235348f, 0.07059128f, 0.03137433f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.02745257f, 0.00392195f, 0.01176563f }, { { 0.298045f, 0.04706119f, 0.03529608f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.0235309f, 0.00392195f, 0.01176563f }, { { 0.2705939f, 0.03529608f, 0.03529608f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.03529608f, 0.01176563f, 0.01176563f }, { { 0.352947f, 0.09412124f, 0.03529608f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.03529608f, 0.00392195f, 0.01568734f }, { { 0.3882412f, 0.04706119f, 0.04706119f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.03137433f, 0.01568734f, 0.0235309f }, { { 0.345104f, 0.129416f, 0.07451299f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.03529608f, 0.01568734f, 0.01960913f }, { { 0.3882412f, 0.129416f, 0.06274787f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.04706119f, 0.01960913f, 0.02745257f }, { { 0.4902016f, 0.1803971f, 0.08627796f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.04706119f, 0.03137433f, 0.03921773f }, { { 0.4941232f, 0.2666723f, 0.1176511f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.04706119f, 0.03921773f, 0.03921773f }, { { 0.4980448f, 0.3137313f, 0.1254943f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.00784381f, 0.00392195f, 0.01176563f }, { { 0.09412124f, 0.04313947f, 0.03529608f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.00784381f, 0.00784381f, 0.01176563f }, { { 0.06274787f, 0.06274787f, 0.1176511f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.01176563f, 0.00392195f, 0.01176563f }, { { 0.1490242f, 0.03529608f, 0.04313947f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.01960913f, 0.01176563f, 0.03137433f }, { { 0.2156916f, 0.1019645f, 0.1019645f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.0235309f, 0.01568734f, 0.03529608f }, { { 0.2588292f, 0.1411809f, 0.1058862f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.03529608f, 0.0235309f, 0.03921773f }, { { 0.3764764f, 0.2039268f, 0.1176511f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.03137433f, 0.02745257f, 0.03921773f }, { { 0.1960836f, 0.2274563f, 0.3921627f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.03529608f, 0.03137433f, 0.04313947f }, { { 0.231378f, 0.2666723f, 0.4509861f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.04313947f, 0.03529608f, 0.04706119f }, { { 0.278437f, 0.298045f, 0.4902016f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.03921773f, 0.03529608f, 0.04313947f }, { { 0.2470644f, 0.3058882f, 0.4627508f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.00392195f, 0.00392195f, 0.01176563f }, { { 0.02745257f, 0.04706119f, 0.1254943f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.0f, 0.01176563f, 0.01960913f }, { { 0.01960913f, 0.09804292f, 0.2000051f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.00784381f, 0.0235309f, 0.03921773f }, { { 0.04706119f, 0.2039268f, 0.4156921f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.01568734f, 0.03529608f, 0.04706119f }, { { 0.1019645f, 0.2823587f, 0.4745156f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.0235309f, 0.03529608f, 0.04313947f }, { { 0.1411809f, 0.3058882f, 0.4353f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.0235309f, 0.03137433f, 0.04706119f }, { { 0.1607891f, 0.2588292f, 0.4902016f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.0235309f, 0.03529608f, 0.04706119f }, { { 0.1529458f, 0.2941234f, 0.4902016f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.03137433f, 0.04313947f, 0.04706119f }, { { 0.1882403f, 0.352947f, 0.4980448f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.0f, 0.00784381f, 0.00784381f }, { { 0.01176563f, 0.07059128f, 0.1058862f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.0f, 0.01176563f, 0.00784381f }, { { 0.0f, 0.09412124f, 0.1137294f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.0f, 0.01176563f, 0.01568734f }, { { 0.01176563f, 0.1215728f, 0.1725539f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.00392195f, 0.01960913f, 0.01568734f }, { { 0.03921773f, 0.1568674f, 0.1921619f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.00784381f, 0.0235309f, 0.02745257f }, { { 0.05490454f, 0.1960836f, 0.2745156f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.01176563f, 0.03137433f, 0.03137433f }, { { 0.09019956f, 0.2705939f, 0.345104f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.0235309f, 0.03529608f, 0.02745257f }, { { 0.1411809f, 0.3058882f, 0.3098098f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.0235309f, 0.03921773f, 0.03529608f }, { { 0.1490242f, 0.3294176f, 0.3764764f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.0235309f, 0.04313947f, 0.03529608f }, { { 0.1568674f, 0.3568686f, 0.3568686f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.0f, 0.01176563f, 0.00784381f }, { { 0.01960913f, 0.1137294f, 0.02745257f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.01176563f, 0.0235309f, 0.0f }, { { 0.129416f, 0.1882403f, 0.0f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.0f, 0.01960913f, 0.01568734f }, { { 0.00392195f, 0.1803971f, 0.05490454f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.00784381f, 0.02745257f, 0.01960913f }, { { 0.1058862f, 0.2392212f, 0.06274787f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.01176563f, 0.03137433f, 0.00392195f }, { { 0.1451026f, 0.2705939f, 0.01176563f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.02745257f, 0.03529608f, 0.0f }, { { 0.2862803f, 0.298045f, 0.00392195f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.01568734f, 0.03529608f, 0.0235309f }, { { 0.1921619f, 0.3098098f, 0.07843459f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.02745257f, 0.04313947f, 0.01176563f }, { { 0.3098098f, 0.3490255f, 0.03529608f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.02745257f, 0.04313947f, 0.0235309f }, { { 0.2941234f, 0.345104f, 0.07059128f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.03529608f, 0.04706119f, 0.03137433f }, { { 0.3647118f, 0.3764764f, 0.09804292f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.02745257f, 0.02745257f, 0.00784381f }, { { 0.298045f, 0.2274563f, 0.0235309f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.03137433f, 0.02745257f, 0.01568734f }, { { 0.3254961f, 0.231378f, 0.05490454f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.03921773f, 0.03529608f, 0.00784381f }, { { 0.4000058f, 0.298045f, 0.03137433f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.03921773f, 0.03529608f, 0.0235309f }, { { 0.4000058f, 0.2902018f, 0.07843459f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.03921773f, 0.03921773f, 0.0235309f }, { { 0.4235353f, 0.3176529f, 0.07451299f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.03921773f, 0.03921773f, 0.01960913f }, { { 0.4156921f, 0.3372608f, 0.06274787f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.03921773f, 0.04313947f, 0.0235309f }, { { 0.4156921f, 0.3607903f, 0.07451299f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.03921773f, 0.04706119f, 0.02745257f }, { { 0.4235353f, 0.3921627f, 0.09019956f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.0235309f, 0.01176563f, 0.0f }, { { 0.2431428f, 0.1058862f, 0.0f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.04313947f, 0.03529608f, 0.0235309f }, { { 0.4509861f, 0.2902018f, 0.07059128f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.04706119f, 0.04313947f, 0.01176563f }, { { 0.4980448f, 0.352947f, 0.04313947f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.04706119f, 0.04313947f, 0.0235309f }, { { 0.4902016f, 0.345104f, 0.07451299f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.04706119f, 0.04313947f, 0.02745257f }, { { 0.4823586f, 0.3647118f, 0.09019956f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.04706119f, 0.04706119f, 0.02745257f }, { { 0.4902016f, 0.3882412f, 0.09019956f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.03137433f, 0.01176563f, 0.00392195f }, { { 0.3254961f, 0.1176511f, 0.01568734f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.04706119f, 0.02745257f, 0.0f }, { { 0.4980448f, 0.2352996f, 0.00392195f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.03921773f, 0.02745257f, 0.01960913f }, { { 0.407849f, 0.2431428f, 0.05882626f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.04706119f, 0.03137433f, 0.01960913f }, { { 0.4980448f, 0.278437f, 0.05882626f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.04706119f, 0.03529608f, 0.02745257f }, { { 0.4980448f, 0.3019665f, 0.08235628f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.04313947f, 0.03921773f, 0.03137433f }, { { 0.4470646f, 0.3215744f, 0.1019645f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.01176563f, 0.01176563f, 0.01176563f }, { { 0.07843459f, 0.07843459f, 0.07843459f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.02745257f, 0.02745257f, 0.02745257f }, { { 0.1843188f, 0.1843188f, 0.1843188f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.03529608f, 0.03529608f, 0.03529608f }, { { 0.2235348f, 0.2235348f, 0.2235348f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.04313947f, 0.03921773f, 0.03921773f }, { { 0.2588292f, 0.250986f, 0.2431428f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.45f, 1.0f, { 0.0235309f, 0.0235309f, 0.0235309f }, { { 0.00392195f, 0.00392195f, 0.00392195f }, 1.0f, 0.06f, 0.8f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } } // line 168
};

const DrawParamMaterial cBeardMaterials[100] = {
    { 0.2f, 0.0f, { 0.00784381f, 0.00392195f, 0.00392195f }, { { 0.01960913f, 0.01568734f, 0.01568734f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } }, // line 172
    { 0.2f, 0.0f, { 0.01176563f, 0.00392195f, 0.0f }, { { 0.1254943f, 0.04706119f, 0.00784381f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.01568734f, 0.00392195f, 0.0f }, { { 0.1803971f, 0.03529608f, 0.00392195f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.0235309f, 0.00784381f, 0.00392195f }, { { 0.2431428f, 0.09019956f, 0.01176563f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.0235309f, 0.0235309f, 0.02745257f }, { { 0.1411809f, 0.1411809f, 0.1490242f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.01176563f, 0.01176563f, 0.0f }, { { 0.1529458f, 0.09412124f, 0.00784381f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.0235309f, 0.01568734f, 0.00392195f }, { { 0.2666723f, 0.1372593f, 0.01176563f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.03921773f, 0.03137433f, 0.01176563f }, { { 0.407849f, 0.250986f, 0.04313947f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.0f, 0.0f, 0.0f }, { { 0.01176563f, 0.01176563f, 0.01176563f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.01960913f, 0.01960913f, 0.01960913f }, { { 0.1254943f, 0.1333377f, 0.1333377f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.01960913f, 0.01176563f, 0.00784381f }, { { 0.2000051f, 0.09412124f, 0.0235309f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.01568734f, 0.01568734f, 0.00784381f }, { { 0.1882403f, 0.1451026f, 0.02745257f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.01176563f, 0.01568734f, 0.03137433f }, { { 0.08235628f, 0.129416f, 0.3294176f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.00784381f, 0.01960913f, 0.01568734f }, { { 0.06274787f, 0.1725539f, 0.1725539f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.01568734f, 0.00784381f, 0.0f }, { { 0.1882403f, 0.08627796f, 0.00784381f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.03137433f, 0.0f, 0.0f }, { { 0.3294176f, 0.0235309f, 0.00392195f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.00392195f, 0.00784381f, 0.01960913f }, { { 0.03529608f, 0.07451299f, 0.2039268f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.03137433f, 0.01568734f, 0.0f }, { { 0.3294176f, 0.1490242f, 0.0f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.0235309f, 0.01960913f, 0.01960913f }, { { 0.1411809f, 0.1333377f, 0.1215728f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.03921773f, 0.01568734f, 0.0f }, { { 0.4235353f, 0.1254943f, 0.00392195f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.0f, 0.0f, 0.0f }, { { 0.01960913f, 0.01960913f, 0.01960913f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.04706119f, 0.01176563f, 0.01176563f }, { { 0.4784371f, 0.1098079f, 0.03921773f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.04706119f, 0.02745257f, 0.01960913f }, { { 0.4705939f, 0.2392212f, 0.06666958f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.02745257f, 0.01568734f, 0.01176563f }, { { 0.2745156f, 0.1254943f, 0.03529608f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.0235309f, 0.00392195f, 0.00392195f }, { { 0.2588292f, 0.05882626f, 0.01960913f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.04706119f, 0.01960913f, 0.01960913f }, { { 0.4980448f, 0.1803971f, 0.05882626f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.04706119f, 0.03137433f, 0.03137433f }, { { 0.4980448f, 0.2392212f, 0.09412124f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.04706119f, 0.03529608f, 0.03529608f }, { { 0.4980448f, 0.298045f, 0.1058862f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.01960913f, 0.00784381f, 0.00784381f }, { { 0.2235348f, 0.07059128f, 0.03137433f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.02745257f, 0.00392195f, 0.01176563f }, { { 0.298045f, 0.04706119f, 0.03529608f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.0235309f, 0.00392195f, 0.01176563f }, { { 0.2705939f, 0.03529608f, 0.03529608f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.03529608f, 0.01176563f, 0.01176563f }, { { 0.352947f, 0.09412124f, 0.03529608f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.03529608f, 0.00392195f, 0.01568734f }, { { 0.3882412f, 0.04706119f, 0.04706119f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.03137433f, 0.01568734f, 0.0235309f }, { { 0.345104f, 0.129416f, 0.07451299f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.03529608f, 0.01568734f, 0.01960913f }, { { 0.3882412f, 0.129416f, 0.06274787f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.04706119f, 0.01960913f, 0.02745257f }, { { 0.4902016f, 0.1803971f, 0.08627796f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.04706119f, 0.03137433f, 0.03921773f }, { { 0.4941232f, 0.2666723f, 0.1176511f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.04706119f, 0.03921773f, 0.03921773f }, { { 0.4980448f, 0.3137313f, 0.1254943f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.00784381f, 0.00392195f, 0.01176563f }, { { 0.09412124f, 0.04313947f, 0.03529608f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.00784381f, 0.00784381f, 0.01176563f }, { { 0.06274787f, 0.06274787f, 0.1176511f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.01176563f, 0.00392195f, 0.01176563f }, { { 0.1490242f, 0.03529608f, 0.04313947f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.01960913f, 0.01176563f, 0.03137433f }, { { 0.2156916f, 0.1019645f, 0.1019645f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.0235309f, 0.01568734f, 0.03529608f }, { { 0.2588292f, 0.1411809f, 0.1058862f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.03529608f, 0.0235309f, 0.03921773f }, { { 0.3764764f, 0.2039268f, 0.1176511f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.03137433f, 0.02745257f, 0.03921773f }, { { 0.1960836f, 0.2274563f, 0.3921627f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.03529608f, 0.03137433f, 0.04313947f }, { { 0.231378f, 0.2666723f, 0.4509861f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.04313947f, 0.03529608f, 0.04706119f }, { { 0.278437f, 0.298045f, 0.4902016f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.03921773f, 0.03529608f, 0.04313947f }, { { 0.2470644f, 0.3058882f, 0.4627508f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.00392195f, 0.00392195f, 0.01176563f }, { { 0.02745257f, 0.04706119f, 0.1254943f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.0f, 0.01176563f, 0.01960913f }, { { 0.01960913f, 0.09804292f, 0.2000051f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.00784381f, 0.0235309f, 0.03921773f }, { { 0.04706119f, 0.2039268f, 0.4156921f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.01568734f, 0.03529608f, 0.04706119f }, { { 0.1019645f, 0.2823587f, 0.4745156f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.0235309f, 0.03529608f, 0.04313947f }, { { 0.1411809f, 0.3058882f, 0.4353f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.0235309f, 0.03137433f, 0.04706119f }, { { 0.1607891f, 0.2588292f, 0.4902016f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.0235309f, 0.03529608f, 0.04706119f }, { { 0.1529458f, 0.2941234f, 0.4902016f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.03137433f, 0.04313947f, 0.04706119f }, { { 0.1882403f, 0.352947f, 0.4980448f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.0f, 0.00784381f, 0.00784381f }, { { 0.01176563f, 0.07059128f, 0.1058862f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.0f, 0.01176563f, 0.00784381f }, { { 0.0f, 0.09412124f, 0.1137294f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.0f, 0.01176563f, 0.01568734f }, { { 0.01176563f, 0.1215728f, 0.1725539f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.00392195f, 0.01960913f, 0.01568734f }, { { 0.03921773f, 0.1568674f, 0.1921619f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.00784381f, 0.0235309f, 0.02745257f }, { { 0.05490454f, 0.1960836f, 0.2745156f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.01176563f, 0.03137433f, 0.03137433f }, { { 0.09019956f, 0.2705939f, 0.345104f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.0235309f, 0.03529608f, 0.02745257f }, { { 0.1411809f, 0.3058882f, 0.3098098f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.0235309f, 0.03921773f, 0.03529608f }, { { 0.1490242f, 0.3294176f, 0.3764764f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.0235309f, 0.04313947f, 0.03529608f }, { { 0.1568674f, 0.3568686f, 0.3568686f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.0f, 0.01176563f, 0.00784381f }, { { 0.01960913f, 0.1137294f, 0.02745257f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.01176563f, 0.0235309f, 0.0f }, { { 0.129416f, 0.1882403f, 0.0f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.0f, 0.01960913f, 0.01568734f }, { { 0.00392195f, 0.1803971f, 0.05490454f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.00784381f, 0.02745257f, 0.01960913f }, { { 0.1058862f, 0.2392212f, 0.06274787f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.01176563f, 0.03137433f, 0.00392195f }, { { 0.1451026f, 0.2705939f, 0.01176563f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.02745257f, 0.03529608f, 0.0f }, { { 0.2862803f, 0.298045f, 0.00392195f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.01568734f, 0.03529608f, 0.0235309f }, { { 0.1921619f, 0.3098098f, 0.07843459f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.02745257f, 0.04313947f, 0.01176563f }, { { 0.3098098f, 0.3490255f, 0.03529608f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.02745257f, 0.04313947f, 0.0235309f }, { { 0.2941234f, 0.345104f, 0.07059128f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.03529608f, 0.04706119f, 0.03137433f }, { { 0.3647118f, 0.3764764f, 0.09804292f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.02745257f, 0.02745257f, 0.00784381f }, { { 0.298045f, 0.2274563f, 0.0235309f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.03137433f, 0.02745257f, 0.01568734f }, { { 0.3254961f, 0.231378f, 0.05490454f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.03921773f, 0.03529608f, 0.00784381f }, { { 0.4000058f, 0.298045f, 0.03137433f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.03921773f, 0.03529608f, 0.0235309f }, { { 0.4000058f, 0.2902018f, 0.07843459f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.03921773f, 0.03921773f, 0.0235309f }, { { 0.4235353f, 0.3176529f, 0.07451299f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.03921773f, 0.03921773f, 0.01960913f }, { { 0.4156921f, 0.3372608f, 0.06274787f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.03921773f, 0.04313947f, 0.0235309f }, { { 0.4156921f, 0.3607903f, 0.07451299f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.03921773f, 0.04706119f, 0.02745257f }, { { 0.4235353f, 0.3921627f, 0.09019956f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.0235309f, 0.01176563f, 0.0f }, { { 0.2431428f, 0.1058862f, 0.0f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.04313947f, 0.03529608f, 0.0235309f }, { { 0.4509861f, 0.2902018f, 0.07059128f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.04706119f, 0.04313947f, 0.01176563f }, { { 0.4980448f, 0.352947f, 0.04313947f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.04706119f, 0.04313947f, 0.0235309f }, { { 0.4902016f, 0.345104f, 0.07451299f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.04706119f, 0.04313947f, 0.02745257f }, { { 0.4823586f, 0.3647118f, 0.09019956f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.04706119f, 0.04706119f, 0.02745257f }, { { 0.4902016f, 0.3882412f, 0.09019956f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.03137433f, 0.01176563f, 0.00392195f }, { { 0.3254961f, 0.1176511f, 0.01568734f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.04706119f, 0.02745257f, 0.0f }, { { 0.4980448f, 0.2352996f, 0.00392195f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.03921773f, 0.02745257f, 0.01960913f }, { { 0.407849f, 0.2431428f, 0.05882626f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.04706119f, 0.03137433f, 0.01960913f }, { { 0.4980448f, 0.278437f, 0.05882626f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.04706119f, 0.03529608f, 0.02745257f }, { { 0.4980448f, 0.3019665f, 0.08235628f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.04313947f, 0.03921773f, 0.03137433f }, { { 0.4470646f, 0.3215744f, 0.1019645f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.01176563f, 0.01176563f, 0.01176563f }, { { 0.07843459f, 0.07843459f, 0.07843459f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.02745257f, 0.02745257f, 0.02745257f }, { { 0.1843188f, 0.1843188f, 0.1843188f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.03529608f, 0.03529608f, 0.03529608f }, { { 0.2235348f, 0.2235348f, 0.2235348f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.04313947f, 0.03921773f, 0.03921773f }, { { 0.2588292f, 0.250986f, 0.2431428f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } },
    { 0.2f, 0.0f, { 0.0235309f, 0.0235309f, 0.0235309f }, { { 0.00392195f, 0.00392195f, 0.00392195f }, 1.0f, 0.0f, 1.3f }, { { 0.0f, 0.0f, 0.0f }, 1.0f, 0.5f } } // line 271

};

// NOTE: WHERE DOES THIS COME FROM? just taken from a render
const rio::BaseVec4f cLightDir = { -0.12279f, 0.70711f, 0.69636f, 1.0f };

const rio::BaseVec4f cLightColor = { 1.00f, 1.00f, 1.00f, 1.00f };

}

ShaderSwitch::ShaderSwitch()
#if RIO_IS_CAFE
    : mAttribute()
    , mFetchShader()
#elif RIO_IS_WIN
    : mVBOHandle()
    , mVAOHandle()
#endif
    , mCallback()
    , mpCharInfo(nullptr)
{
    rio::MemUtil::set(mVertexUniformLocation, u8(-1), sizeof(mVertexUniformLocation));
    rio::MemUtil::set(mPixelUniformLocation, u8(-1), sizeof(mPixelUniformLocation));
    mSamplerLocation = -1;
    rio::MemUtil::set(mAttributeLocation, u8(-1), sizeof(mAttributeLocation));
}

ShaderSwitch::~ShaderSwitch()
{
#if RIO_IS_CAFE
    if (mFetchShader.program != nullptr)
    {
        rio::MemUtil::free(mFetchShader.program);
        mFetchShader.program = nullptr;
    }
#elif RIO_IS_WIN
    if (mVAOHandle != GL_NONE)
    {
        RIO_GL_CALL(glDeleteVertexArrays(1, &mVAOHandle));
        RIO_GL_CALL(glDeleteBuffers(FFL_ATTRIBUTE_BUFFER_TYPE_MAX, mVBOHandle));
        rio::MemUtil::set(mVBOHandle, 0, sizeof(mVBOHandle));
        mVAOHandle = GL_NONE;
    }
#endif
}

void ShaderSwitch::initialize()
{
    mShader.load("SampleShader", rio::Shader::MODE_UNIFORM_REGISTER);

    mVertexUniformLocation[VERTEX_UNIFORM_MV]   = mShader.getVertexUniformLocation("mv");
    mVertexUniformLocation[VERTEX_UNIFORM_PROJ] = mShader.getVertexUniformLocation("proj");

    mPixelUniformLocation[PIXEL_UNIFORM_MODULATE_TYPE]                     = mShader.getFragmentUniformLocation("modulateType");
    mPixelUniformLocation[PIXEL_UNIFORM_GAMMA_TYPE]                     = mShader.getFragmentUniformLocation("gammaType");
    mPixelUniformLocation[PIXEL_UNIFORM_DRAW_TYPE]                     = mShader.getFragmentUniformLocation("drawType");
    mPixelUniformLocation[PIXEL_UNIFORM_PAD0]              = mShader.getFragmentUniformLocation("pad0");
    mPixelUniformLocation[PIXEL_UNIFORM_CONST_COLOR1] = mShader.getFragmentUniformLocation("constColor1");
    mPixelUniformLocation[PIXEL_UNIFORM_CONST_COLOR2] = mShader.getFragmentUniformLocation("constColor2");
    mPixelUniformLocation[PIXEL_UNIFORM_CONST_COLOR3] = mShader.getFragmentUniformLocation("constColor3");
    mPixelUniformLocation[PIXEL_UNIFORM_LIGHT_DIR_IN_VIEW]                  = mShader.getFragmentUniformLocation("lightDirInView");
    mPixelUniformLocation[PIXEL_UNIFORM_LIGHT_COLOR]               = mShader.getFragmentUniformLocation("lightColor");
    mPixelUniformLocation[PIXEL_UNIFORM_SSS_COLOR]             = mShader.getFragmentUniformLocation("u_SssColor");
    mPixelUniformLocation[PIXEL_UNIFORM_SPECULAR_COLOR]           = mShader.getFragmentUniformLocation("u_SpecularColor");
    mPixelUniformLocation[PIXEL_UNIFORM_RIM_COLOR]           = mShader.getFragmentUniformLocation("u_RimColor");
    mPixelUniformLocation[PIXEL_UNIFORM_HALF_LAMBERT_FACTOR]          = mShader.getFragmentUniformLocation("u_HalfLambertFactor");
    mPixelUniformLocation[PIXEL_UNIFORM_SSS_SPECULAR_FACTOR]     = mShader.getFragmentUniformLocation("u_SssSpecularFactor");
    mPixelUniformLocation[PIXEL_UNIFORM_SPECULAR_FACTOR_A]    = mShader.getFragmentUniformLocation("u_SpecularFactorA");
    mPixelUniformLocation[PIXEL_UNIFORM_SPECULAR_FACTOR_B]    = mShader.getFragmentUniformLocation("u_SpecularFactorB");
    mPixelUniformLocation[PIXEL_UNIFORM_SPECULAR_SHINNESS]                       = mShader.getFragmentUniformLocation("u_SpecularShinness");
    mPixelUniformLocation[PIXEL_UNIFORM_RIM_POWER]                  = mShader.getFragmentUniformLocation("u_RimPower");
    mPixelUniformLocation[PIXEL_UNIFORM_RIM_WIDTH]                  = mShader.getFragmentUniformLocation("u_RimWidth");
    mPixelUniformLocation[PIXEL_UNIFORM_LIGHT_ENABLE]                  = mShader.getFragmentUniformLocation("lightEnable");

    mSamplerLocation = mShader.getFragmentSamplerLocation("s_Tex");

    mAttributeLocation[FFL_ATTRIBUTE_BUFFER_TYPE_POSITION]  = mShader.getVertexAttribLocation("i_Position");
    mAttributeLocation[FFL_ATTRIBUTE_BUFFER_TYPE_NORMAL]    = mShader.getVertexAttribLocation("i_Normal");
    // no tangent with switch shader, despite there being
    // evidence that the switch assets have them (AdjustVertexBuffer)
    //mAttributeLocation[FFL_ATTRIBUTE_BUFFER_TYPE_TANGENT]   = mShader.getVertexAttribLocation("a_tangent");
    mAttributeLocation[FFL_ATTRIBUTE_BUFFER_TYPE_TEXCOORD]  = mShader.getVertexAttribLocation("i_TexCoord");
    // NOTE: i_Parameter is another name for the color attribute
    // only one used is specular mix/blend in r component, only for hair
    mAttributeLocation[FFL_ATTRIBUTE_BUFFER_TYPE_COLOR]     = mShader.getVertexAttribLocation("i_Parameter");
#if RIO_IS_CAFE
    GX2InitAttribStream(
        &(mAttribute[FFL_ATTRIBUTE_BUFFER_TYPE_POSITION]),
        mAttributeLocation[FFL_ATTRIBUTE_BUFFER_TYPE_POSITION],
        FFL_ATTRIBUTE_BUFFER_TYPE_POSITION,
        0,
        GX2_ATTRIB_FORMAT_FLOAT_32_32_32
    );
    GX2InitAttribStream(
        &(mAttribute[FFL_ATTRIBUTE_BUFFER_TYPE_TEXCOORD]),
        mAttributeLocation[FFL_ATTRIBUTE_BUFFER_TYPE_TEXCOORD],
        FFL_ATTRIBUTE_BUFFER_TYPE_TEXCOORD,
        0,
        GX2_ATTRIB_FORMAT_FLOAT_32_32
    );
    GX2InitAttribStream(
        &(mAttribute[FFL_ATTRIBUTE_BUFFER_TYPE_NORMAL]),
        mAttributeLocation[FFL_ATTRIBUTE_BUFFER_TYPE_NORMAL],
        FFL_ATTRIBUTE_BUFFER_TYPE_NORMAL,
        0,
        GX2_ATTRIB_FORMAT_SNORM_10_10_10_2
    );
    /*GX2InitAttribStream(
        &(mAttribute[FFL_ATTRIBUTE_BUFFER_TYPE_TANGENT]),
        mAttributeLocation[FFL_ATTRIBUTE_BUFFER_TYPE_TANGENT],
        FFL_ATTRIBUTE_BUFFER_TYPE_TANGENT,
        0,
        GX2_ATTRIB_FORMAT_SNORM_8_8_8_8
    );*/
    GX2InitAttribStream(
        &(mAttribute[FFL_ATTRIBUTE_BUFFER_TYPE_COLOR]),
        mAttributeLocation[FFL_ATTRIBUTE_BUFFER_TYPE_COLOR],
        FFL_ATTRIBUTE_BUFFER_TYPE_COLOR,
        0,
        GX2_ATTRIB_FORMAT_UNORM_8_8_8_8
    );

    u32 size = GX2CalcFetchShaderSizeEx(FFL_ATTRIBUTE_BUFFER_TYPE_MAX, GX2_FETCH_SHADER_TESSELLATION_NONE, GX2_TESSELLATION_MODE_DISCRETE);
    void* buffer = rio::MemUtil::alloc(size, GX2_SHADER_ALIGNMENT);
    GX2InitFetchShaderEx(&mFetchShader, (u8*)buffer, FFL_ATTRIBUTE_BUFFER_TYPE_MAX, mAttribute, GX2_FETCH_SHADER_TESSELLATION_NONE, GX2_TESSELLATION_MODE_DISCRETE);
#elif RIO_IS_WIN
    RIO_ASSERT(mVAOHandle == GL_NONE);
    RIO_GL_CALL(glGenBuffers(FFL_ATTRIBUTE_BUFFER_TYPE_MAX, mVBOHandle));
    RIO_GL_CALL(glGenVertexArrays(1, &mVAOHandle));
    RIO_ASSERT(mVAOHandle != GL_NONE);
#endif

    mSampler.setWrap(rio::TEX_WRAP_MODE_MIRROR, rio::TEX_WRAP_MODE_MIRROR, rio::TEX_WRAP_MODE_MIRROR);
    mSampler.setFilter(rio::TEX_XY_FILTER_MODE_LINEAR, rio::TEX_XY_FILTER_MODE_LINEAR, rio::TEX_MIP_FILTER_MODE_POINT, rio::TEX_ANISO_1_TO_1);

    mCallback.pObj = this;
    mCallback.pApplyAlphaTestFunc = &ShaderSwitch::applyAlphaTestCallback_;
    mCallback.pDrawFunc = &ShaderSwitch::drawCallback_;
    mCallback.pSetMatrixFunc = &ShaderSwitch::setMatrixCallback_;
    setShaderCallback_();
}

void ShaderSwitch::setShaderCallback_()
{
    FFLSetShaderCallback(&mCallback);
    // have to set this AFTER FFLSetShaderCallback (initializes it to false)
    // this sets the faceline color alpha to 0, which is needed by this shader
    mCallback.facelineColorIsTransparent = true;
}

void ShaderSwitch::bind(bool light_enable, FFLiCharInfo* pCharInfo)
{
    mpCharInfo = pCharInfo;
    mShader.bind();
    setShaderCallback_();
#if RIO_IS_CAFE
    GX2SetFetchShader(&mFetchShader);
#elif RIO_IS_WIN
    RIO_GL_CALL(glBindVertexArray(mVAOHandle));
    for (u32 i = 0; i < FFL_ATTRIBUTE_BUFFER_TYPE_MAX; i++)
        RIO_GL_CALL(glDisableVertexAttribArray(i));
#endif

    // NOTE: no light enable means drawing mask or faceline textures
    mShader.setUniform(light_enable, u32(-1), mPixelUniformLocation[PIXEL_UNIFORM_LIGHT_ENABLE]);

    //mShader.setUniform(s32(0), u32(-1), mPixelUniformLocation[PIXEL_UNIFORM_PAD0]);
    mShader.setUniform(sGammaType, u32(-1), mPixelUniformLocation[PIXEL_UNIFORM_GAMMA_TYPE]);
    mShader.setUniform(cLightDir, u32(-1), mPixelUniformLocation[PIXEL_UNIFORM_LIGHT_DIR_IN_VIEW]);
    mShader.setUniform(cLightColor, u32(-1), mPixelUniformLocation[PIXEL_UNIFORM_LIGHT_COLOR]);

}

void ShaderSwitch::setViewUniform(const rio::BaseMtx34f& model_mtx, const rio::BaseMtx34f& view_mtx, const rio::BaseMtx44f& proj_mtx) const
{
    mShader.setUniform(proj_mtx, mVertexUniformLocation[VERTEX_UNIFORM_PROJ], u32(-1));

    rio::Matrix34f mv;
    mv.setMul(static_cast<const rio::Matrix34f&>(view_mtx), static_cast<const rio::Matrix34f&>(model_mtx));
    rio::Matrix44f mv44;
    mv44.fromMatrix34(mv);
    mShader.setUniform(mv44, mVertexUniformLocation[VERTEX_UNIFORM_MV], u32(-1));
}

void ShaderSwitch::applyAlphaTest(bool enable, rio::Graphics::CompareFunc func, f32 ref) const
{
#if RIO_IS_CAFE
    GX2SetAlphaTest(enable, GX2CompareFunction(func), ref);
#endif
}

void ShaderSwitch::setCulling(FFLCullMode mode)
{
    if (mode > FFL_CULL_MODE_FRONT)
        return;

    rio::RenderState render_state;

    switch (mode)
    {
    case FFL_CULL_MODE_NONE:
        render_state.setCullingMode(rio::Graphics::CULLING_MODE_NONE);
        break;
    case FFL_CULL_MODE_BACK:
        render_state.setCullingMode(rio::Graphics::CULLING_MODE_BACK);
        break;
    case FFL_CULL_MODE_FRONT:
        render_state.setCullingMode(rio::Graphics::CULLING_MODE_FRONT);
        break;
    default:
        break;
    }

    render_state.applyCullingAndPolygonModeAndPolygonOffset();
}

void ShaderSwitch::applyAlphaTestCallback_(void* p_obj, bool enable, rio::Graphics::CompareFunc func, f32 ref)
{
    static_cast<ShaderSwitch*>(p_obj)->applyAlphaTest(enable, func, ref);
}

void ShaderSwitch::bindTexture_(const FFLModulateParam& modulateParam)
{
    if (modulateParam.pTexture2D != nullptr)
    {
        mSampler.linkTexture2D(reinterpret_cast<const rio::Texture2D*>(modulateParam.pTexture2D));
        mSampler.tryBindFS(mSamplerLocation, 0);
    }
}

void ShaderSwitch::setConstColor_(u32 ps_loc, const FFLColor& color)
{
    mShader.setUniform(getColorUniform(color), u32(-1), ps_loc);
}

void ShaderSwitch::setModulateMode_(FFLModulateMode mode)
{
    // GLASS AND CAP MODULATE TYPES ARE REVERSED ON SWITCH SHADER
    if (mode == FFL_MODULATE_MODE_LUMINANCE_ALPHA) mode = FFL_MODULATE_MODE_ALPHA_OPA;
    else if (mode == FFL_MODULATE_MODE_ALPHA_OPA) mode = FFL_MODULATE_MODE_LUMINANCE_ALPHA;
    mShader.setUniform(s32(mode), u32(-1), mPixelUniformLocation[PIXEL_UNIFORM_MODULATE_TYPE]);
}

void ShaderSwitch::setDrawType_(const FFLModulateParam& modulateParam)
{
    // set draw type shader uniform here
    #define DRAW_TYPE_NORMAL   0
    #define DRAW_TYPE_FACELINE 1
    #define DRAW_TYPE_HAIR     2
    int drawType;

    switch (modulateParam.type)
    {
    case FFL_MODULATE_TYPE_SHAPE_HAIR:
        // takes specular blend/mix into account
        // meaning a_color.r / i_Parameter.r
        drawType = DRAW_TYPE_HAIR;
        // without that, certain highlights/shadows
        // will not appear as they do on switch
        break;
        // NOTE: the shader will take alpha into account if
        // you set draw type uniform to this, and the faceline
        // texture would need to be drawn with alpha background
        // color. if you dont apply this then most faceline
        // textures will be fine except ones with beards
    case FFL_MODULATE_TYPE_SHAPE_FACELINE:
        if (modulateParam.pTexture2D)
        {
            drawType = DRAW_TYPE_FACELINE;
            break;
        }
        [[fallthrough]];
    default:
        drawType = DRAW_TYPE_NORMAL;
        break;
    }
    mShader.setUniform(s32(drawType), u32(-1), mPixelUniformLocation[PIXEL_UNIFORM_DRAW_TYPE]);
}

void ShaderSwitch::setModulate_(const FFLModulateParam& modulateParam)
{
    setModulateMode_(modulateParam.mode);
    setDrawType_(modulateParam);
    setMaterial_(modulateParam.type);

    // if you want to change colors based on modulateParam.type
    // FFL_MODULATE_TYPE_SHAPE_HAIR
    // hair color: pColorR/const1
    // FFL_MODULATE_TYPE_EYEBROW
    // eyebrow color: pColorB/const2
    // NOTE, also need to color: FFL_MODULATE_TYPE_SHAPE_BEARD, FFL_MODULATE_TYPE_MUSTACHE, FFL_MODULATE_TYPE_FACE_BEARD

    switch (modulateParam.mode)
    {
    case FFL_MODULATE_MODE_CONSTANT:
    case FFL_MODULATE_MODE_ALPHA:
    case FFL_MODULATE_MODE_LUMINANCE_ALPHA:
    case FFL_MODULATE_MODE_ALPHA_OPA:
        setConstColor_(mPixelUniformLocation[PIXEL_UNIFORM_CONST_COLOR1], *modulateParam.pColorR);
        break;
    case FFL_MODULATE_MODE_RGB_LAYERED:
        setConstColor_(mPixelUniformLocation[PIXEL_UNIFORM_CONST_COLOR1], *modulateParam.pColorR);
        setConstColor_(mPixelUniformLocation[PIXEL_UNIFORM_CONST_COLOR2], *modulateParam.pColorG);
        mShader.setUniform(modulateParam.pColorB->r, modulateParam.pColorB->g, modulateParam.pColorB->b, 0.0f, u32(-1), mPixelUniformLocation[PIXEL_UNIFORM_CONST_COLOR3]);
        //setConstColor_(mPixelUniformLocation[PIXEL_UNIFORM_CONST_COLOR3], *modulateParam.pColorB);
        break;
    default:
        break;
    }

    bindTexture_(modulateParam);
}

#define SWITCH_MATERIAL_PARAM_PANTS_GRAY CUSTOM_MATERIAL_PARAM_PANTS
#define SWITCH_MATERIAL_PARAM_PANTS_GOLD CUSTOM_MATERIAL_PARAM_PANTS + 1
void ShaderSwitch::setModulatePantsMaterial(PantsColor pantsColor)
{
    FFLColor color = cPantsColors[PANTS_COLOR_GRAY];
    s32 pantsMaterialParam = SWITCH_MATERIAL_PARAM_PANTS_GRAY;
    // NOTE: switch color only supports these two and only by index
    if (pantsColor == PANTS_COLOR_GOLD)
    {
        color = cPantsColors[PANTS_COLOR_GOLD];
        pantsMaterialParam = SWITCH_MATERIAL_PARAM_PANTS_GOLD;
    }

    const FFLModulateType modulateType = static_cast<FFLModulateType>(pantsMaterialParam);

    const FFLModulateParam modulateParam = {
        FFL_MODULATE_MODE_CONSTANT,
        modulateType,
        &color,
        nullptr, // no color G
        nullptr, // no color B
        nullptr  // no texture
    };
    setModulate_(modulateParam);
}

// Use a shortcut to resolve Ver3/FFL hair color to nn::mii CommonColor.
static s32 getHairCommonColorFromVer3_(s32 index)
{
    // HACK: ver3 hair color 0 maps to common color 8
    if (index == 0)
        return 8;
    else
    {
        s32 commonColor = index & FFLI_NN_MII_COMMON_COLOR_MASK;
        RIO_ASSERT(commonColor >= 0 && commonColor <= 100);
        return commonColor;
    }
}

void ShaderSwitch::setMaterial_(const FFLModulateType modulateType)
{
    // we need to get favorite/faceline/hair/beard color from somewhere so
    //FFLiCharInfo* mpCharInfo = &reinterpret_cast<FFLiCharModel*>(mpCharModel)->charInfo;

    //RIO_LOG("[Shader::setMaterial_] your mii's favorite color id is: %d\n", charModel->mpCharInfo->favoriteColor);

    DrawParamMaterial drawParamMaterial;
    s32 commonColor; // set by hair and beard

    //const FFLModulateType modulateType = modulateParam.type;
    switch (modulateType)
    {
        case FFL_MODULATE_TYPE_SHAPE_NOSELINE:
        case FFL_MODULATE_TYPE_SHAPE_MASK:
            drawParamMaterial = cMaskMaterial;
            break;
        case FFL_MODULATE_TYPE_SHAPE_GLASS:
            drawParamMaterial = cGlassMaterial;
            break;
        // pants: special or not
        case FFL_MODULATE_TYPE_SHAPE_FOREHEAD:
        case FFL_MODULATE_TYPE_SHAPE_FACELINE:
            // does not need conversion
            drawParamMaterial = cFacelineMaterials[mpCharInfo->parts.facelineColor];
            break;
        case FFL_MODULATE_TYPE_SHAPE_NOSE:
            drawParamMaterial = cNoseMaterials[mpCharInfo->parts.facelineColor];
            break;
        // body: favorite color
        case static_cast<FFLModulateType>(CUSTOM_MATERIAL_PARAM_BODY):
            drawParamMaterial = cBodyMaterials[mpCharInfo->favoriteColor];
            break;
        case static_cast<FFLModulateType>(SWITCH_MATERIAL_PARAM_PANTS_GRAY):
            drawParamMaterial = cPantsMaterials[0]; // gray index
            break;
        case static_cast<FFLModulateType>(SWITCH_MATERIAL_PARAM_PANTS_GOLD):
            drawParamMaterial = cPantsMaterials[1]; // gold index
            break;
        case FFL_MODULATE_TYPE_SHAPE_CAP:
            drawParamMaterial = cHatMaterials[mpCharInfo->favoriteColor];
            break;

        case FFL_MODULATE_TYPE_SHAPE_HAIR:
            commonColor = getHairCommonColorFromVer3_(mpCharInfo->parts.hairColor);
            drawParamMaterial = cHairMaterials[commonColor];
            //RIO_LOG("hair color: %d, specular factor B: %f\n", commonColor, drawParamMaterial.specular.factorB);
            break;
        case FFL_MODULATE_TYPE_SHAPE_BEARD:
            commonColor = getHairCommonColorFromVer3_(mpCharInfo->parts.beardColor);
            drawParamMaterial = cBeardMaterials[commonColor];
            break;
        default:
            // not suitable for material, return
            return;
    }


    mShader.setUniform(drawParamMaterial.sssColor.r, drawParamMaterial.sssColor.g, drawParamMaterial.sssColor.b, 1.00f, u32(-1), mPixelUniformLocation[PIXEL_UNIFORM_SSS_COLOR]);

    mShader.setUniform(drawParamMaterial.specular.color.r, drawParamMaterial.specular.color.g, drawParamMaterial.specular.color.b, 1.00f, u32(-1), mPixelUniformLocation[PIXEL_UNIFORM_SPECULAR_COLOR]);

    mShader.setUniform(drawParamMaterial.rimLight.color.r, drawParamMaterial.rimLight.color.g, drawParamMaterial.rimLight.color.b, 1.00f, u32(-1), mPixelUniformLocation[PIXEL_UNIFORM_RIM_COLOR]);

    mShader.setUniform(drawParamMaterial.halfLambertFactor, u32(-1), mPixelUniformLocation[PIXEL_UNIFORM_HALF_LAMBERT_FACTOR]);

    mShader.setUniform(drawParamMaterial.sssSpecularBlendFactor, u32(-1), mPixelUniformLocation[PIXEL_UNIFORM_SSS_SPECULAR_FACTOR]);

    mShader.setUniform(drawParamMaterial.specular.factorA, u32(-1), mPixelUniformLocation[PIXEL_UNIFORM_SPECULAR_FACTOR_A]);
    mShader.setUniform(drawParamMaterial.specular.factorB, u32(-1), mPixelUniformLocation[PIXEL_UNIFORM_SPECULAR_FACTOR_B]);
    mShader.setUniform(drawParamMaterial.specular.shinness, u32(-1), mPixelUniformLocation[PIXEL_UNIFORM_SPECULAR_SHINNESS]);

    mShader.setUniform(drawParamMaterial.rimLight.power, u32(-1), mPixelUniformLocation[PIXEL_UNIFORM_RIM_POWER]);

    mShader.setUniform(drawParamMaterial.rimLight.width, u32(-1), mPixelUniformLocation[PIXEL_UNIFORM_RIM_WIDTH]);
}

void ShaderSwitch::draw_(const FFLDrawParam& draw_param)
{
    setCulling(draw_param.cullMode);
    setModulate_(draw_param.modulateParam);

    // HACK: INJECT SWITCH GLASS NORMALS
    // the switch shader does a reflection on the glasses
    // however neither the FFLResHigh or AFLResHigh resources
    // have normals on the glass mesh so this is the easiest
    // way to hack it in
    static const u32 cGlassNormalBufferLE[] = {
        0x567a67ca, 0x567a6436, 0x56759fca, 0x56759c36
    };

    if (draw_param.primitiveParam.pIndexBuffer != nullptr)
    {
#if RIO_IS_CAFE
        for (int type = FFL_ATTRIBUTE_BUFFER_TYPE_POSITION; type <= FFL_ATTRIBUTE_BUFFER_TYPE_COLOR; ++type)
        {
            GX2SetAttribBuffer(
                type,
                draw_param.attributeBufferParam.attributeBuffers[type].size,
                draw_param.attributeBufferParam.attributeBuffers[type].stride,
                draw_param.attributeBufferParam.attributeBuffers[type].ptr
            );
        }
#elif RIO_IS_WIN

        GLuint indexBufferHandle;
        RIO_GL_CALL(glGenBuffers(1, &indexBufferHandle));  // Generate a new buffer

        for (int type = FFL_ATTRIBUTE_BUFFER_TYPE_POSITION; type <= FFL_ATTRIBUTE_BUFFER_TYPE_COLOR; ++type)
        {
            const FFLAttributeBuffer& buffer = draw_param.attributeBufferParam.attributeBuffers[type];
            s32 location = mAttributeLocation[type];
            void* ptr = buffer.ptr;

            if (ptr && location != -1 && buffer.stride > 0)
            {
                u32 stride = buffer.stride;
                u32 vbo_handle = mVBOHandle[type];
                u32 size = buffer.size;

                // Bind buffer and set vertex attribute pointer
                RIO_GL_CALL(glBindBuffer(GL_ARRAY_BUFFER, vbo_handle));
                RIO_GL_CALL(glBufferData(GL_ARRAY_BUFFER, size, ptr, GL_STATIC_DRAW));
                RIO_GL_CALL(glEnableVertexAttribArray(location));

                // Determine attribute pointer parameters based on buffer type
                switch (type)
                {
                case FFL_ATTRIBUTE_BUFFER_TYPE_POSITION:
                    RIO_GL_CALL(glVertexAttribPointer(location, 3, GL_FLOAT, false, stride, nullptr));
                    break;
                case FFL_ATTRIBUTE_BUFFER_TYPE_TEXCOORD:
                    RIO_GL_CALL(glVertexAttribPointer(location, 2, GL_FLOAT, false, stride, nullptr));
                    break;
                case FFL_ATTRIBUTE_BUFFER_TYPE_NORMAL:
                    // force this arbitrary normal buffer when glass mesh is being drawn
                    if (draw_param.modulateParam.type == FFL_MODULATE_TYPE_SHAPE_GLASS)
                        RIO_GL_CALL(glBufferData(GL_ARRAY_BUFFER, sizeof(cGlassNormalBufferLE), cGlassNormalBufferLE, GL_STATIC_DRAW));
                    RIO_GL_CALL(glVertexAttribPointer(location, 4, GL_INT_2_10_10_10_REV, true, stride, nullptr));
                    break;
                case FFL_ATTRIBUTE_BUFFER_TYPE_TANGENT:
                    RIO_GL_CALL(glVertexAttribPointer(location, 4, GL_BYTE, true, stride, nullptr));
                    break;
                case FFL_ATTRIBUTE_BUFFER_TYPE_COLOR:
                    RIO_GL_CALL(glVertexAttribPointer(location, 4, GL_UNSIGNED_BYTE, true, stride, nullptr));
                    break;
                default:
                    break;
                }
            }
            else if (location != -1)
                // Disable the attribute to avoid using uninitialized data
                RIO_GL_CALL(glDisableVertexAttribArray(location));

        }
#endif

        // Draw elements
        rio::Drawer::DrawElements(
            draw_param.primitiveParam.primitiveType,
            draw_param.primitiveParam.indexCount,
            (const u16*)draw_param.primitiveParam.pIndexBuffer
        );
    }
}


void ShaderSwitch::drawCallback_(void* p_obj, const FFLDrawParam* draw_param)
{
    static_cast<ShaderSwitch*>(p_obj)->draw_(*draw_param);
}

void ShaderSwitch::setMatrix_(const rio::BaseMtx44f& matrix)
{
    mShader.setUniform(matrix, mVertexUniformLocation[VERTEX_UNIFORM_PROJ], u32(-1));
    mShader.setUniformColumnMajor(rio::Matrix44f::ident, mVertexUniformLocation[VERTEX_UNIFORM_MV], u32(-1));
}

void ShaderSwitch::setMatrixCallback_(void* p_obj, const rio::BaseMtx44f* matrix)
{
    static_cast<ShaderSwitch*>(p_obj)->setMatrix_(*matrix);
}
